서브쿼리


SECLECT select_list

FROM table
WHERE expr operator
	(

		SELECT	 select_list
		FROM	 table
		WHERE	....

	);

----------

내부에 기술하는 쿼리를 "서브쿼리"하고 하고 외부에 기술하는 쿼리를 '메인쿼리' 라고 합니다. 

서브쿼리는 다른 select문에 질의에 삽입된 쿼리문입니다. 

메인쿼리의 WHERE 절에 사용되는 operator는 당일 행 비교 연산자 (>, >=, <=, =, <>)와 다중 행 비교연산자

(IN, ANY, SOME, ALL, EXIST)를 사용합니다. 

------------------

다중 행 서브 쿼리
-------------------
IN연산자 

메일 쿼리의 비교조건('=' 연산자로 비교할 경우)이 서브 쿼리 결과 중에서 하나라도 일치하면 참입니다. 

메인 쿼리의 비교조건에서 서브 쿼리의 출력 결과와 하나라도 일치 하면 메인 쿼리의 WHERE 절이 참이 되도록 하는 연산자 입니다. 


-----------------
ANY 연산자 

메인 쿼리의 비교 조건이 서브 쿼리의 검색 결과와 하나이상이 일치하면 참입니다. 

서브쿼리가 반환하는 각각의 값과 비교합니다 '<ANT는 최대 값보다 작음을 나타내고'  '>ANY는 최소값 보다 큼을 나타내며'
'='ANY'는 IN과 동일합니다.'
	

-----------------

ALL 연산자

메인 쿼리의 비교조건이 서브 쿼리의 검색 결과와 모든 값이 일치하면 
참입니다. 

값을 서브 쿼리에서 반환하는 모든 값과 비교합니다. 

'>ALL은 최대값보다 큼을 나타내고', '<ALL은 최소값보다 작음을 나타냅니다.'

-----------------

SOME 연산자

메인 쿼리의 비교조건이 서브 쿼리의 검색 결과와 모든 값이 일치하면 
참입니다. 

----------------
EXIST

메인 쿼리의 비교조건이 서브 쿼리의 결과 중에서 만족하는 값이 하나라도 존재하면 참입니다. 



---------------

ch08 테이블 생성 / 수정/ 삭제 하기 

---------------

테이블 구조를 만드는 CREATE TABLE문

DDL(데이터 정의어)는 테이블의 구조 자체를 생성 수정 삭제 제거 하도록 하는 명령문의 집합니다. 

CREATE TABLE 문을 사용하여 데이터를 저장할 테이블을 생성합니다. 

이 명령문 하나로 테이블에 대한 구조를 정의하고, 데이터를 저장하기 위한 공간을 할당 합니다. 

------------

테이블 명 및 컴럼명 정의 규칙

문자(A-Z ,a-z)로 시작해야하면 30자 이내로 작성하빈다. 

문자(A-z,a-z),숫자(0	~9) 특수문자(_, &, #)만 사용 가능하빈다. 

대소문자 구별이 없습니다. 소문자로 저장하려면 작은 따옴표로 묶어 주어야 합니다. 

동일한 사용자가 송한 다른 객체의 이름과 중복되지 않아야 합니다. 

------------

형식

CREATE TABLE [schema.]table(

	column datatype [DEFAULT expression] [column_constraint clasue] [,....]

);

schema  소유자의 이름으로 데이터베이스 사용자 계정과 같은 의미 입니다. 

TABLE : 생성하고자 하는 테이블 이름 입니다. 

datatype : 컬럼에 대한 데이터 타임과 길이를 지정합니다. 

DEFAULT expression : 데이터 입력시 값이 생략된 경우에 입력되는 기본 값입니다. 

column_constraint clasue 컬럼에 대한 정의되는 무결성 제약 조건이 들어값니다. 

------------

데이터를 복사하여 테이블 생성하기 

CREATE TABLE table [ column [, column ,...]]
AS subquery

CREATE TABLE 명령문 다음에 컬럼명을 명시적으로 언급할 경우에는 
컬럼수와 데이터 타입과 서브 쿼리문의 SELECT문에 의해 검색된 컬럼이 반드시 일치해야 합니다. 

컬럼명을 명시하지 않았을 경우에는 서브쿼리의 컬럼명이 그대로 새로 생성되는 테이블에 적용됩니다. 


*무결성 제약조건은 NOT NULL 조건만 복사하고, 기본키 외래키와 같은 무결성 제약조건은 복사 되지 않습니다. 


디폴트 옵셩에서 정의한 값을 그대로 복사됩니다. 

서브 쿼리의 출력 결과가 테이블의  초기 데이터로 삽입됩니다. 

서브 쿼리를 이용한 테이블을 생성할 때 데이터는 복사하지 않고 기존 테이블의 구조만 복사할 수 있습니다. 

서브 쿼리의 WHERE 조건절에 항상 거짓이 되는 조건을 지정하면 조건에 맞는 데이터가 발견되지 않게 되어 데이터는 복사되지 않고 기존 테이블의 구조만 복사됩니다. 

*출력 결과가 항상 거짓인 조건은 "WHERE 0=1"과 같이 기술 할 수 있습니다. 

--------------------------

테이블 구조를 변경하는 ALTER TABLE 문

--컬럼추가 

ALTER TABLE ... ADD 명령문을 사용하여 컬럼을 추가하며 추가되는 컬럼에도 기본값을 지정할 수 있습니다. 

ALTER TABLE  teble_name 
ADD (  	[column_name datatype DEFAULT expr]	
	[,column_name data type]
);

-----------------------

컬럼 변경 

ALTER TABLE ...MODIFY 명령문을 이용하여 테이블 에서 컬럼의 타입,크기,기본값을 변경할 수 있습니다. 

ALTER TABLE table_name

MODIFY ( 	[column_name datatype DEFAULT expr]	
	  	[,column_name data type]

);

기존 컬럼에 데이터가 없는 경우에는 컬럼 타입이나 크기 변경이 자유롭지만
기존 데이터가 존재하는 경우엔 타입 변경은 CHAR, VARCHAR2만 허용하고 변경한 컬럼의 크기가 저장된
데이터의 크기보다 같거나 클 경우에만 변경할 수 있습니다. 

숫자 타입은 폭 혹은 전테 자리수를 늘일수 있습니다. 

**기본값의 변경은 변경후에 입력되는 데이터부터 적용됩니다. 



컬럼 제거 

ALTER TABLE .... DROP COLUMN 명령문을 사용하여 테이블 내 의 특정 컬럼과 컬럼의 데이터를 제거할 수 있습니다. 

2개이상의 컬럼이 존재하는 테이블에서만 삭제 할 수 있으며,
한번에 하나의 컬럼만 삭제 할 수 있습니다. 


삭제된 컬럼은 복구 할 수 없습니다. 

ALTER TABLE 	teble_name

DROP COLUMN 	column_name;

------------------------------------
SET UNUSED

SET UNSUED는 시스템의 요구가 적을 때 컬럼을 제거할 수 있도록 하나 이상의 컬럼을 UNSUED로 표시합니다

실제로 테이블에서 해당 컬럼이 제거 되지는 않습니다. 

그렇기 때문에 실제 DROP 명령을 실행하는데 걸리는 시간보다 응답시간이 빨라집니다. 

UNUSED로 표시한 컬럼은 데이터가 존재하는 경우에도 삭제된 것으로 처리 되기 때문에 SELECT 절로 엑세스가 불가능 합니다. 

또한 DESCRIBE 문으로도 표시되지 않습니다. 

---------------------------------------

테이블 명을 변경하는 RENAME문

테이블을 포함한 객체의 이름을 변경하는 DDL 명령문의로 RENAME문ㅇ르 제공합니다. 

RENAME old_name TO new_name;
-----------------------------------------
테이블 구조를 제거하는 DROP TABLE 문

DROP TABLE 명령문을 사용하여 기존 테이블 데이터를 모두 제거합니다. 

삭제 테이블의 기본키나 고유키를 다른 테이블에서 참조하고 있는 경우에는 삭제가 불가능 하다. 

그렇게 때문에 참조하는 테이블(자식 테이블)을 먼저 제거해야 합니다. 


----------------------
테이블의 모든 데이터를 제거하는 
TRUNCATE TABLE 문

기존에 사용하던 테이블의 모든 로우를 제거합니다. 

테이블의 구조는 그대로 유지하고 테이블의 테이터와 할당된 공간만 해제 됩니다. 

테이블에 생성된 제약 조건과 연관된 인덱스, 뷰, 동의어 유지 됩니다. 




